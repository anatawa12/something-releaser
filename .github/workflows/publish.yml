name: Publish
on:
  workflow_dispatch: 
    inputs: 
      dry-run:
        type: boolean
        description: 'whether if dry-run'
        required: false
        default: false

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: snow-actions/git-config-user@v1.0.0

      - uses: dtolnay/rust-toolchain@stable
      - uses: anatawa12/something-releaser@6900502f8133162ebc74e4abb7304164face8887 # TODO: use v3

      - name: Move to releasing branch
        run: git switch -c releasing

      - name: Update Version Name
        run: |
          get-version | version-stable | set-version

          git commit -am "v$(get-version)"
          git push -f origin releasing

  build-release:
    name: Build Release
    needs: [ prepare-release ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        arch: [ x86_64, aarch64 ]
        include:
          - os: ubuntu-latest
            target-suffix: unknown-linux-gnu
          - os: macos-latest
            target-suffix: apple-darwin
          - os: windows-latest
            target-suffix: pc-windows-msvc
        exclude:
          # linux arm64 is not supported by GitHub Actions
          # https://github.com/actions/runner/blob/main/docs/start/envlinux.md
          - os: ubuntu-latest
            arch: aarch64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releasing
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch }}-${{ matrix.target-suffix }}
      - name: Build
        shell: bash
        run: node ./scripts/build.js "$TARGET"
        env: 
          TARGET: ${{ matrix.arch }}-${{ matrix.target-suffix }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-${{ matrix.arch }}-${{ matrix.target-suffix }}
          path: build

  release:
    environment: deployment
    name: Release
    runs-on: ubuntu-latest
    needs: [ prepare-release, build-release ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releasing
          token: ${{ inputs.dry-run && github.token || secrets.ACTIONS_PAT }}
      - uses: snow-actions/git-config-user@v1.0.0
      - name: fix fetch
        run: |
          # fetch the branch to be published
          git remote set-branches --add origin releases
          git remote set-branches --add origin master
          # fetch tags to verify the tag is not exists
          git fetch origin --tags
        shell: bash

      - name: Download Built binary
        uses: actions/download-artifact@v4
        with:
          path: build
          pattern: built-*
          merge-multiple: true
      - run: ls -R build
      - run: chmod -R +x build
      - uses: ./ # using the current version of this action with prebuilt binary to test
      - name: Execute Basic commands
        run: |
          # check if the binary is valid
          time something-releaser --help
          time get-version
          time version-stable 1.0.0-beta.0

      - name: Create Release Commit
        run: |
          set -o pipefail
          git branch releases origin/releases
          VERSION="$(get-version)"
          gh-export-variable VERSION "$VERSION"

          SOURCE_COMMIT="$(git rev-parse HEAD)"
          RELEASES_COMMIT="$(git rev-parse origin/releases)"
          # remove unused files
          rm -rf \
            .github \
            shell-tests \
            src \
            Cargo.toml \
            Cargo.lock \
          
          # edit gitignore
          sed -n '/#### PUBLISH DELETE MARKER ####/q;p' -i .gitignore
          
          # add modified files and commit
          git add .
          MERGE_COMMIT="$(git commit-tree -p $RELEASES_COMMIT -p $SOURCE_COMMIT -m "v$VERSION at $SOURCE_COMMIT" $(git write-tree))"
          git reset --soft $MERGE_COMMIT
          git push -f origin HEAD:releasing

      # to use something-releaser after release, use latest known
      - uses: anatawa12/something-releaser@6900502f8133162ebc74e4abb7304164face8887 # TODO: use v3
      - name: Push release to branch
        if: ${{ !inputs.dry-run }}
        run: |
          set -o pipefail
          # create tag
          git tag "v$VERSION"
          git tag -f "v$(version-major $VERSION)"

          # create pre-next version commit
          git checkout -f master
          
          get-version | version-next | version-snapshot | set-version

          git commit -am "prepare for v$(get-version | version-stable)"

          # push
          git push origin master
          git push origin releasing:releases
          git push --tags -f
          git push -d origin releasing
        shell: bash
