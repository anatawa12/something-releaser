name: Publish
on:
  workflow_dispatch: 
    inputs: 
      dry-run:
        type: boolean
        description: 'whether if dry-run'
        required: false
        default: false

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs: 
      version: ${{ env.VERSION }}
      major-version: ${{ env.MAJOR_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - uses: snow-actions/git-config-user@v1.0.0

      - uses: dtolnay/rust-toolchain@stable
      - uses: ./ # using the current version of this action
        with:
          build-on-install: true

      - name: Move to releasing branch
        run: git switch -c releasing

      - name: Update Version Name
        run: |
          get-version | version-stable | set-version
          VERSION="$(get-version)"

          MAJOR_VERSION="$(version-major "$VERSION")"

          git commit -am "v$VERSION"
          git push -f origin releasing

          gh-export-variable -- VERSION "$VERSION"
          gh-export-variable -- MAJOR_VERSION "$MAJOR_VERSION"

  build-release:
    name: Build Release
    needs: [ prepare-release ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        arch: [ x86_64, aarch64 ]
        include:
          - os: ubuntu-latest
            target-suffix: unknown-linux-gnu
          - os: macos-latest
            target-suffix: apple-darwin
          - os: windows-latest
            target-suffix: pc-windows-msvc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releasing
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch }}-${{ matrix.target-suffix }}
      - name: Build
        shell: bash
        run: node ./scripts/build.js "$TARGET"
        env: 
          TARGET: ${{ matrix.arch }}-${{ matrix.target-suffix }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-${{ matrix.arch }}-${{ matrix.target-suffix }}
          path: build/${{ matrix.arch }}-${{ matrix.target-suffix }}

  release:
    environment: deployment
    name: Release
    runs-on: ubuntu-latest
    needs: [ prepare-release, build-release ]
    env:
      VERSION: ${{ needs.prepare-release.outputs.version }}
      MAJOR_VERSION: ${{ needs.prepare-release.outputs.major-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: releasing
          token: ${{ github.event.inputs.dry-run && github.token || secrets.ACTIONS_PAT }}
      - name: fix fetch
        run: |
          # fetch the branch to be published
          git remote set-branches --add origin releases
          git remote set-branches --add origin master
          # fetch tags to verify the tag is not exists
          git fetch origin --tags
        shell: bash

      - name: Download Built binary
        uses: actions/download-artifact@v4
        with:
          path: build
          pattern: built-*
          merge-multiple: true
      - run: ls -R build
      - uses: ./ # using the current version of this action with prebuilt binary
      - name: Execute Basic commands
        run: |
          # check if the binary is valid
          something-releaser --help
          get-version | set-version
          version-stable 1.0.0-beta.0

      - name: Create Release Commit
        run: |
          git branch releases origin/releases

          SOURCE_COMMIT="$(git rev-parse HEAD)"
          RELEASES_COMMIT="$(git rev-parse origin/releases)"
          # remove unused files
          rm -rf \
            .github \
            shell-tests \
            src \
          
          # edit gitignore
          sed -n '/#### PUBLISH DELETE MARKER ####/q;p' -i .gitignore
          
          # add modified files and commit
          git add .
          MERGE_COMMIT="$(git commit-tree -p $RELEASES_COMMIT -p $SOURCE_COMMIT -m "v$VERSION at $SOURCE_COMMIT" $(git write-tree))"
          git reset --soft $MERGE_COMMIT
          git push -f origin HEAD:releasing

      - name: Push release to branch
        if: ${{ !github.event.inputs.dry-run }}
        run: |
          # create tag
          git tag "v$VERSION"
          git tag -f "v$MAJOR_VERSION"

          # create pre-next version commit
          git checkout -f master
          
          next_version="$(version-next "$VERSION" minor)"
          set-version "$(version-patch $(version-snapshot "$next_version"))"

          git add package*.json
          git commit -m "prepare for v$next_version"

          # push
          git push origin master
          git push origin releasing:releases
          git push --tags -f
          git push -d origin releasing
        shell: bash
