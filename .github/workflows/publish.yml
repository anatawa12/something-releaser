name: Publish
on:
  workflow_dispatch: {}
jobs:
  release:
    name: Do Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: anatawa12/something-releaser@v2
      - name: fix fetch
        run: |
          # fetch the branch to be published
          git remote set-branches --add origin releases
          # fetch tags to verify the tag is not exists
          git fetch origin --tags
        shell: bash
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
          cache: 'npm'

      # building
      - run: npm ci
      - run: npm run all

      - name: Publish
        run: |
          set -eu
          # set user name
          set-git-user anatawa12-bot

          # create version commit on master
          VERSION="$(version-stable "$(version-minor $(get-version))")"
          set-version "$VERSION"
          MAJOR_VERSION="$(version-major "$VERSION")"

          git add package*.json
          git commit -m "v$VERSION"

          HASH="$(git rev-parse HEAD)"
          # checkout releases at origin/releases witout chanigng local tree
          git branch releases origin/releases
          git symbolic-ref HEAD refs/heads/releases
          # remove unused files
          rm -rf \
            .github \
            __tests__ \
            __tests__resources \
            lib \
            node_modules \
            scripts \
            shell-tests \
            src \
            .eslintignore \
            .eslintrc.json \
            jest.config.js \
            package.json \
            package-lock.json \
            tsconfig.eslint.json \
            tsconfig.json \
          
          # edit gitignore
          sed -n '/#### PUBLISH DELETE MARKER ####/q;p' -i .gitignore
          
          # add modified files and commit
          git add .
          git reset --soft $(git commit-tree -p HEAD -p $HASH -m "v$VERSION at $HASH" $(git write-tree))
          # create tag
          git tag -f "v$VERSION"
          git tag -f "v$MAJOR_VERSION"

          # create pre-next version commit
          git checkout master
          
          next_version="$(version-next "$VERSION" minor)"
          set-version "$(version-patch $(version-snapshot "$next_version"))"

          git add package*.json
          git commit -m "prepare for v$next_version"

          # push
          git push
          git push origin master
          git push --tags -f
        shell: bash
